use std::buf::{RawCallBuffer, MemoryBufferWriter}
use address_array::{ AddressVec}
use snake_token::{SnakeToken}
use interfaces::ERC20

// The following implementation is based on the following solidity implementation
// https://github.com/OpenZeppelin/gnosis-multisig/blob/master/contracts/MultiSigWallet.sol

const MAX_OWNER_COUNT: u8 = 10
const TX_MAX_DATA_SIZE: u256 = 1024

type TransactionData = Array<u8, { TX_MAX_DATA_SIZE }>

// Events
struct Confirmation {
    #indexed
    pub owner: address
    #indexed
    pub tx_id: u256
}

struct Revocation {
    #indexed
    pub owner: address
    #indexed
    pub tx_id: u256
}

struct Submission {
    #indexed
    pub tx_id: u256
}

struct Execution {
    #indexed
    pub tx_id: u256
}

struct ExecutionFailure {
    #indexed
    pub tx_id: u256
}

struct OwnerAddition {
    #indexed
    pub owner: address
}

struct OwnerRemoval {
    #indexed
    pub owner: address
}

struct QuorumChange {
    #indexed
    pub quorum_pct: u256
}

struct Transaction {
    pub destination: address
    pub value: u256
    pub data: TransactionData
    pub data_length: u16
    pub executed: bool
}

fn tx_to_buffer(tx: Transaction) -> RawCallBuffer {
    let mut buf: RawCallBuffer = RawCallBuffer::new(
        input_len: tx.data_length,
        output_len: 0
    )
    let mut writer: MemoryBufferWriter = buf.writer()
    let mut i: u256 = 0
    while i < tx.data_length {
        writer.write(value: tx.data[i])
        i += 1
    }
    return buf
}

contract SimpleDAO {
    deployer: address
    initialized: bool
    tx_count: u256
    transactions: Map<u256, Transaction>
    confirmations: Map<u256, Map<address, bool>>
    owners: Array<address, { MAX_OWNER_COUNT }>
    is_owner: Map<address, bool>
    weight: Map<address, u256>
    total_weight: u256
    gov_token: ERC20
    quorum_pct: u256

    pub fn __init__(mut self, ctx: Context) {
        self.deployer = ctx.msg_sender()
    }

    // Initialize owners with weights, quorum in percantage and governance token
    pub fn initialize(mut self, ctx: Context, owners: Array<(address, u256), { MAX_OWNER_COUNT }>, quorum_pct: u256, gov_token: ERC20) {
        // Making sure this can only be called once by the account that deployed the contract
        assert self.deployer == ctx.msg_sender()
        assert not self.initialized
        self.initialized = true

        let mut tmp: Array<address, { MAX_OWNER_COUNT }> = [address(0); MAX_OWNER_COUNT]
        for pair in owners {
            let (owner, weight):(address, u256) = pair
            if owner != 0 and not self.is_owner[owner] {
                tmp.push(owner)
                self.is_owner[owner] = true
            }
        }
        self.owners = tmp
        self.gov_token = gov_token
        self._distribute_governance_token(ctx, receivers: owners, quorum_pct: quorum_pct)
        self._update_weights(ctx)
    }

    /// Distribute governance tokens to the given receivers. Since distribute tokens can change effective powers of owners, the
    /// call is allways required to also update the `quorum_pct` of total weight needed to execute transactions.
    /// For as long as Fe does not support dynamically sized arrays, this is limited to 10 receivers at a time
    pub fn distribute_governance_token(mut self, ctx: Context, receivers: Array<(address, u256), { MAX_OWNER_COUNT }>, quorum_pct: u256) {
        self.validate_only_wallet(ctx)
        self._distribute_governance_token(ctx, receivers, quorum_pct)
    }

    /// Update the internal weights of owners based on there holdings of the governance token at the time of the API call.
    pub fn update_weights(mut self, ctx: Context) {
        self.validate_only_wallet(ctx)
        self._update_weights(ctx)
    }

    /// Allows to add a new owner. Transaction has to be sent by wallet.
    pub fn add_owner(mut self, mut ctx: Context, owner: address, distribute_amount: u256) {
        self.validate_only_wallet(ctx)
        self.validate_owner_does_not_exist(owner)
        self.validate_not_null(owner)

        if distribute_amount > 0 {
            self.gov_token.transfer(to: owner, distribute_amount)
        }
        self.is_owner[owner] = true
        self.push_owner(owner)
        ctx.emit(OwnerAddition(owner))
        self._update_weights(ctx)
    }

    /// Allows to remove an owner. Transaction has to be sent by wallet.
    pub fn remove_owner(mut self, mut ctx: Context, owner: address) {
        self.validate_only_wallet(ctx)
        self.validate_owner_exists(owner)
        self.is_owner[owner] = false
        self.weight[owner] = 0
        self.delete_owner(owner)
        ctx.emit(OwnerRemoval(owner))
        self._update_weights(ctx)
    }

    /// Allows to replace an owner with a new owner. Transaction has to be sent by wallet.
    pub fn replace_owner(mut self, mut ctx: Context, owner: address, new_owner: address) {
        self.validate_only_wallet(ctx)
        self.validate_owner_exists(owner)
        self.validate_owner_does_not_exist(new_owner)
        self.delete_owner(owner)
        self.push_owner(new_owner)
        self.is_owner[owner] = false
        self.weight[owner] = 0
        self.is_owner[new_owner] = true
        ctx.emit(OwnerRemoval(owner))
        ctx.emit(OwnerAddition(owner: new_owner))
        self._update_weights(ctx)
    }

    /// Allows to change the quorum in percentage that is needed to excute transactions. Transaction has to be sent by wallet.
    pub fn change_quorum(mut self, mut ctx: Context, quorum_pct: u256) {
        self.quorum_pct = quorum_pct
        ctx.emit(QuorumChange(quorum_pct))
    }

    /// Allows an owner to submit and confirm a transaction.
    pub fn submit_transaction(
        mut self,
        mut ctx: Context,
        destination: address,
        value: u256,
        data: TransactionData,
        data_length: u16,
    ) -> u256 {
        let tx_id: u256 = self.add_transaction(ctx, destination, value, data, data_length)
        self.confirm_transaction(ctx, tx_id)
        return tx_id
    }

    /// Allows an owner to confirm a transaction
    pub fn confirm_transaction(mut self, mut ctx: Context, tx_id: u256) {
        self.validate_owner_exists(ctx.msg_sender())
        self.validate_tx_exists(tx_id)
        self.validate_not_confirmed(tx_id, ctx.msg_sender())

        self.confirmations[tx_id][ctx.msg_sender()] = true
        ctx.emit(Confirmation(owner: ctx.msg_sender(), tx_id))
        self.execute_transaction(ctx, tx_id)
    }

    /// Allows an owner to revoke a confirmation for a transaction.
    pub fn revoke_confirmation(mut self, mut ctx: Context, tx_id: u256) {
        self.validate_owner_exists(ctx.msg_sender())
        self.validate_tx_exists(tx_id)
        self.validate_confirmed(tx_id, ctx.msg_sender())

        self.confirmations[tx_id][ctx.msg_sender()] = false
        ctx.emit(Revocation(owner: ctx.msg_sender(), tx_id))
    }

    /// Allows anyone to execute a confirmed transaction.
    pub fn execute_transaction(mut self, mut ctx: Context, tx_id: u256) {
        self.validate_not_executed(tx_id)
        self.validate_owner_exists(ctx.msg_sender())
        self.validate_confirmed(tx_id, ctx.msg_sender())

        if self.is_confirmed(tx_id) {
            let mut tx: Transaction = self.transactions[tx_id].to_mem()
            self.transactions[tx_id].executed = true
            let mut buf: RawCallBuffer = tx_to_buffer(tx)
            if ctx.raw_call(addr: tx.destination, value: tx.value, buf) {
                ctx.emit(Execution(tx_id))
            } else {
                ctx.emit(ExecutionFailure(tx_id))
                self.transactions[tx_id].executed = false
            }
        }
    }

    /// Returns the confirmation status of a transaction.
    pub fn is_confirmed(self, tx_id: u256) -> bool {
        let mut weight: u256 = 0
        for owner in self.owners.to_mem() {
            if self.confirmations[tx_id][owner] {
                weight += self.weight[owner]
            }
            if weight * 100 / self.total_weight >= self.quorum_pct {
                return true
            }
        }
        return false
    }

    // Public readonly functions

    /// Returns list of owners
    pub fn get_owners(self) -> Array<address, { MAX_OWNER_COUNT }> {
        return self.owners.to_mem()
    }

    /// Returns the weight of the owner
    pub fn get_weight(self, owner: address) -> u256 {
        return self.weight[owner]
    }

    // Returns the total weight of all owners
    pub fn get_total_weight(self) -> u256 {
        return self.total_weight
    }

    /// Returns a fixed size array containing the addresses that have confirmed the given tx_id
    pub fn get_confirmations(self, tx_id: u256) -> Array<address, { MAX_OWNER_COUNT }> {
        let mut confirmations: Array<address, { MAX_OWNER_COUNT }> = [address(0); MAX_OWNER_COUNT]
        let mut i_match: u256 = 0
        for owner in self.owners.to_mem() {
            if self.confirmations[tx_id][owner] {
                confirmations[i_match] = owner
                i_match += 1
            }
        }
        return confirmations
    }

    // Internal functions

    fn _distribute_governance_token(mut self, ctx: Context, receivers: Array<(address, u256), { MAX_OWNER_COUNT }>, quorum_pct: u256) {
        for pair in receivers {
            let (to, amount):(address, u256) = pair
            if to != 0 and amount > 0{
                self.gov_token.transfer(to, amount)
            }
        }
        self.quorum_pct = quorum_pct
    }

    fn _update_weights(mut self, ctx: Context) {
        // We call this from different places such as `add_owner` and `remove_owner` which also means
        // we might be wasting gas if it ends up being called repeatedly. We choose safety over gas efficiency.
        // In the future we might add `batch_add_owner` and `batch_remove_owner` to mitigate this.
        let mut total_weight: u256 = 0
        for owner in self.owners.to_mem() {
            if owner == 0 {
                continue
            }
            let owner_balance: u256 = self.gov_token.balanceOf(owner)
            self.weight[owner] = owner_balance
            total_weight += owner_balance
        }

        // Clearly something is wrong here. Could happen if for instance all owners have 0 balance
        // but in that case it would be better to revert and keep all weights as they are until
        // the situation is resolved
        if total_weight == 0 {
            revert
        } else {
            self.total_weight = total_weight
        }
    }

    fn add_transaction(
        mut self,
        mut ctx: Context,
        destination: address,
        value: u256,
        data: TransactionData,
        data_length: u16,
    ) -> u256 {
        self.validate_not_null(destination)
        let tx_id: u256 = self.tx_count
        self.transactions[tx_id] = Transaction(
            destination,
            value,
            data,
            data_length,
            executed: false,
        )
        self.tx_count += 1
        ctx.emit(Submission(tx_id))
        return tx_id
    }

    // These are only needed because we manually have to load the array in memory and then re-store it
    fn push_owner(mut self, _ owner: address) {
        let mut tmp: Array<address, { MAX_OWNER_COUNT }> = self.owners.to_mem()
        tmp.push(owner)
        self.owners = tmp
    }

    fn delete_owner(mut self, _ owner: address) {
        let mut tmp: Array<address, { MAX_OWNER_COUNT }> = self.owners.to_mem()
        tmp.remove(owner)
        self.owners = tmp
    }

    // Internal validation methods

    fn validate_not_executed(self, _ tx_id: u256) {
        if self.transactions[tx_id].executed {
            revert
        }
    }

    fn validate_owner_exists(self, _ owner: address) {
        if not self.is_owner[owner] {
            revert
        }
    }

    fn validate_owner_does_not_exist(self, _ owner: address) {
        if self.is_owner[owner] {
            revert
        }
    }

    fn validate_confirmed(self, _ tx_id: u256, _ owner: address) {
        if not self.confirmations[tx_id][owner] {
            revert
        }
    }

    fn validate_not_confirmed(self, _ tx_id: u256, _ owner: address) {
        if self.confirmations[tx_id][owner] {
            revert
        }
    }

    fn validate_tx_exists(self, _ tx_id: u256) {
        if self.transactions[tx_id].destination == 0 {
            revert
        }
    }

    fn validate_only_wallet(self, ctx: Context) {
        if ctx.msg_sender() != ctx.self_address() {
            revert
        }
    }

    fn validate_not_null(self, _ addr: address) {
        if addr == 0 {
            revert
        }
    }

    fn validate_valid_requirement(self, _ quorum_pct: u256) {
        if quorum_pct == 0 or quorum_pct > 100 {
            revert
        }
    }

}