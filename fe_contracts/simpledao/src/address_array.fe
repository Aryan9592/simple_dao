

const ZERO_ADDRESS: address = 0x0000000000000000000000000000000000000000
const MAX_CAPACITY: u256 = 10

// Once traits can be generic this could be `Vec<T>`
pub trait AddressVec {
    fn push(mut self, value: address);
    fn remove(mut self, value: address);
}

impl AddressVec for Array<address, { MAX_CAPACITY }> {
    fn push(mut self, _ value: address) {
        let mut index: u256 = 0
        while index < MAX_CAPACITY {
            if self[index] == ZERO_ADDRESS {
                self[index] = value
                return
            }
            index += 1
        }
        // exceeds MAX_CAPACITY
        revert
    }

    fn remove(mut self, _ value: address) {
        let mut index: u256 = 0
        while index < MAX_CAPACITY {
            if self[index] == value {
                self[index] = ZERO_ADDRESS
                return
            }
            index += 1
        }
        // not found
        revert
    }
}

#test
pub fn test_addressvec() {
    let mut vec: Array<address, { 10 }> = [ZERO_ADDRESS; 10]
    vec.push(0x627306090abaB3A6e1400e9345bC60c78a8BEf57)
    assert vec[0] == 0x627306090abaB3A6e1400e9345bC60c78a8BEf57
    vec.remove(0x627306090abaB3A6e1400e9345bC60c78a8BEf57)
    assert vec[0] == ZERO_ADDRESS
}
